#include <stdio.h>

struct Process {
    int pid, at, bt, ct, tat, wt, rt;
};

int main() {
    int i, n, tq, t = 0, completed = 0;
    struct Process p[20];
    float avgTAT = 0, avgWT = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter Arrival Time and Burst Time for each process:\n");
    for (i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Process %d Arrival Time: ", i + 1);
        scanf("%d", &p[i].at);
        printf("Process %d Burst Time: ", i + 1);
        scanf("%d", &p[i].bt);
        p[i].rt = p[i].bt;
        p[i].ct = 0;
    }

    printf("Enter Time Quantum: ");
    scanf("%d", &tq);

    // Round Robin Scheduling
    while (completed < n) {
        int done = 1; 

        for (i = 0; i < n; i++) {
            if (p[i].rt > 0 && p[i].at <= t) {
                done = 0;

                if (p[i].rt > tq) {
                    t += tq;
                    p[i].rt -= tq;
                } else {
                    t += p[i].rt;
                    p[i].ct = t; /
                    p[i].rt = 0;
                    completed++;
                }
            }
        }

        if (done == 1) { // no process ready, move time forward
            t++;
        }
    }

    // Calculate TAT and WT
    for (i = 0; i < n; i++) {
        p[i].tat = p[i].ct - p[i].at; 
        p[i].wt = p[i].tat - p[i].bt; 
        avgTAT += p[i].tat;
        avgWT += p[i].wt;
    }

    avgTAT /= n;
    avgWT /= n;

    // Print results
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n",
               p[i].pid, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
    }

    printf("\nAverage TAT = %.2f", avgTAT);
    printf("\nAverage WT = %.2f\n", avgWT);

    return 0;
}
