#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int pipefd[2];
    pid_t pid;
    char write_msg[] = "HELLO FROM PARENT!!";
    char read_msg[100];

    if (pipe(pipefd) == -1)
    {
        perror("Pipe failed");
        return 1;
    }

    pid = fork();
    if (pid < 0)
    {
        perror("Fork failed");
        return 1;
    }

    if (pid > 0)
    {
        // Parent process
        close(pipefd[0]); // Close unused read end
        write(pipefd[1], write_msg, strlen(write_msg) + 1);
        close(pipefd[1]);
        wait(NULL);
    }
    else
    {
        // Child process
        close(pipefd[1]); // Close unused write end
        read(pipefd[0], read_msg, sizeof(read_msg));
        printf("Child received message: %s\n", read_msg);
        close(pipefd[0]);
    }

    return 0;
}
